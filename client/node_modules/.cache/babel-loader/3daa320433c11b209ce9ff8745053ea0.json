{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nimport UserActionTypes from '../user/user.types';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectCurrentUser } from '../user/user.selectors';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["/Users/navjeetsingh/Library/Mobile Documents/com~apple~CloudDocs/Sites/complete-react-developer-2020/dh/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","clearCart","setCartFromFirebase","selectCartItems","CartActionTypes","UserActionTypes","getUserCartRef","selectCurrentUser","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACrC,QAAMT,GAAG,CAACE,SAAS,EAAV,CAAT;AACA;AAED,OAAO,UAAUQ,oBAAV,GAAiC;AACvC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACO,iBAAD,CAAhC;;AACA,MAAIG,WAAJ,EAAiB;AAChB,QAAI;AACH,YAAMC,OAAO,GAAG,MAAML,cAAc,CAACI,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACG,eAAD,CAA9B;AACA,YAAMQ,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACA,KAJD,CAIE,OAAOE,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD;AACD;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACzD,QAAMT,OAAO,GAAG,MAAML,cAAc,CAACc,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACG,mBAAmB,CAACmB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACA;AAED,OAAO,UAAUW,gBAAV,GAA6B;AACnC,QAAM1B,UAAU,CAACO,eAAe,CAACoB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACA;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC/B,QAAM5B,UAAU,CAACO,eAAe,CAACsB,eAAjB,EAAkCT,qBAAlC,CAAhB;AACA;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC/B,QAAM9B,UAAU,CACf,CACCM,eAAe,CAACyB,QADjB,EAECzB,eAAe,CAAC0B,WAFjB,EAGC1B,eAAe,CAAC2B,oBAHjB,CADe,EAMftB,oBANe,CAAhB;AAQA;AAED,OAAO,UAAUuB,SAAV,GAAsB;AAC5B,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC2B,gBAAD,CAAL,EAAyB3B,IAAI,CAAC+B,YAAD,CAA7B,EAA6C/B,IAAI,CAAC6B,YAAD,CAAjD,CAAD,CAAT;AACA","sourcesContent":["import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nimport UserActionTypes from '../user/user.types';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectCurrentUser } from '../user/user.selectors';\n\nexport function* clearCartOnSignOut() {\n\tyield put(clearCart());\n}\n\nexport function* updateCartInFirebase() {\n\tconst currentUser = yield select(selectCurrentUser);\n\tif (currentUser) {\n\t\ttry {\n\t\t\tconst cartRef = yield getUserCartRef(currentUser.id);\n\t\t\tconst cartItems = yield select(selectCartItems);\n\t\t\tyield cartRef.update({ cartItems });\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n}\n\nexport function* checkCartFromFirebase({ payload: user }) {\n\tconst cartRef = yield getUserCartRef(user.id);\n\tconst cartSnapshot = yield cartRef.get();\n\tyield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\n\nexport function* onSignOutSuccess() {\n\tyield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nexport function* onUserSignIn() {\n\tyield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\n\nexport function* onCartChange() {\n\tyield takeLatest(\n\t\t[\n\t\t\tCartActionTypes.ADD_ITEM,\n\t\t\tCartActionTypes.REMOVE_ITEM,\n\t\t\tCartActionTypes.CLEAR_ITEM_FROM_CART,\n\t\t],\n\t\tupdateCartInFirebase\n\t);\n}\n\nexport function* cartSagas() {\n\tyield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}\n"]},"metadata":{},"sourceType":"module"}